version: "3.8"

services:
  caddy:
    image: caddy:2.7-alpine
    container_name: caddy
    ports:
      - "8083:80"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - geth
    networks:
      - geth-network
  sc-deployer:
    build: ./sc-deployer 
    platform: linux/arm64
    container_name: sc-deployer
    user: root
    volumes:
      - ./sc-deployer:/workspace
      - ./geth-init:/shared
    working_dir: /workspace
    entrypoint: ["/bin/sh", "/workspace/entrypoint.sh"]
    depends_on:
      - geth
    networks:
      - geth-network
  sc-deployment-server:
    image: caddy:2.7-alpine
    container_name: sc-deployment-server
    ports:
      - "8082:80"
    volumes:
      - ./sc-deployment-server/Caddyfile:/etc/caddy/Caddyfile
      # serve deployment.json
      - ./sc-deployer:/usr/share/caddy
    depends_on:
      - sc-deployer
    networks:
      - geth-network
  geth:
    image: ethereum/client-go:v1.15.0
    container_name: geth
    ports:
      - "8545:8545"  # HTTP RPC
      - "8546:8546"  # WebSocket RPC
      - "30303:30303"  # P2P
      - "30303:30303/udp"  # P2P UDP
    volumes:
      - geth-data:/root/.ethereum
      - ./geth:/geth
    command: >
      --dev
      --datadir /root/.ethereum
      --http
      --http.addr 0.0.0.0
      --http.port 8545
      --http.corsdomain "*"
      --http.vhosts "*"
      --http.api "eth,net,web3,personal,miner,admin,debug"
      --ws
      --ws.addr 0.0.0.0
      --ws.port 8546
      --ws.api "eth,net,web3,personal,miner,admin,debug"
      --ws.origins "*"
      --allow-insecure-unlock
      --mine
      --networkid 1337
      --nodiscover
      --verbosity 3
      --miner.gaslimit 8000000
    restart: unless-stopped
    networks:
      - geth-network
  geth-init:
    image: ethereum/client-go:v1.15.0
    container_name: geth-init
    volumes:
      - ./geth-init:/scripts
      - geth-data:/root/.ethereum
      - ./geth-init:/shared
    entrypoint: ["/bin/sh", "/scripts/entrypoint.sh"]
    depends_on:
      - geth
    networks:
      - geth-network
  
  # Graph Stack Services
  graph-ipfs:
    image: ipfs/kubo:v0.28.0
    container_name: graph-ipfs
    ports:
      - "5011:5001"  # IPFS API (충돌 방지)
      - "8090:8080"  # IPFS Gateway (충돌 방지)
    volumes:
      - graph-ipfs-data:/data/ipfs
    environment:
      - IPFS_PROFILE=server
    networks:
      - geth-network
    restart: unless-stopped

  graph-postgres:
    image: postgres:15
    container_name: graph-postgres
    ports:
      - "5442:5432"  # PostgreSQL (충돌 방지)
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_INITDB_ARGS: "--locale=C --encoding=UTF8"
    volumes:
      - graph-postgres-data:/var/lib/postgresql/data
    networks:
      - geth-network
    restart: unless-stopped

  graph-redis:
    image: redis:7-alpine
    container_name: graph-redis
    ports:
      - "6389:6379"  # Redis (충돌 방지)
    volumes:
      - graph-redis-data:/data
    networks:
      - geth-network
    restart: unless-stopped

  graph-node:
    image: graphprotocol/graph-node:v0.34.1
    container_name: graph-node
    ports:
      - "8010:8000"  # GraphQL HTTP (충돌 방지)
      - "8011:8001"  # GraphQL WebSocket (충돌 방지)
      - "8021:8020"  # JSON-RPC (충돌 방지)
      - "8031:8030"  # Subgraph indexing status (충돌 방지)
    depends_on:
      - graph-ipfs
      - graph-postgres
      - graph-redis
      - geth
    environment:
      postgres_host: graph-postgres
      postgres_port: 5432
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: graph-ipfs:5001
      ethereum: "mainnet:http://geth:8545"
      GRAPH_LOG: info
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: "true"
      GRAPH_KILL_IF_UNRESPONSIVE: "true"
      redis: "redis://graph-redis:6379"
    volumes:
      - ./graph/config:/etc/graph-node
    networks:
      - geth-network
    restart: unless-stopped

volumes:
  geth-data:
  graph-ipfs-data:
  graph-postgres-data:
  graph-redis-data:

networks:
  geth-network:
    driver: bridge
    name: 1b_geth-network 